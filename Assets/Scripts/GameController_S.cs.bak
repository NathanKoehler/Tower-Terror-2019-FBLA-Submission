using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System;
using UnityEngine.SceneManagement;
using UnityEngine.Tilemaps;
using UnityEngine.UI;


public class GameController_S : MonoBehaviour
{
    [SerializeField]
    public QnA_S[] qnaArray = null;


    public GameObject[] tableFurniture = null;

    [SerializeField]
    private GameObject[] layouts = null;

    [SerializeField]
    Camera mainCamera = null;
    [SerializeField]
    Camera secondCamera = null;
    [SerializeField]
    GameObject collectable = null;
    [SerializeField]
    GameObject elevatorRail = null;
    [SerializeField]
    GameObject elevatorBackground = null;



    Canvas canvasAsset = null;
    GameObject player = null;
    AudioManager_S AudioManager = null;
    private bool canGoToNext;
    private int level = 0;
    private int questionsWrong = 0;
    private int questionsRight = 0;


    private Canvas_S canvas;


    public static GameController_S self;


    void Awake()
    {
        if (self == null)
        {
            self = this;
            DontDestroyOnLoad(gameObject); // Basic method to remain even after scene load
        }
        else Destroy(gameObject);
    }


    // Start is called before the first frame update
    private void Start()
    {
        canvas = GameObject.Find("Canvas").GetComponent<Canvas_S>();
        player = GameObject.Find("Play");
        AudioManager = GameObject.Find("AudioManager_S").GetComponent<AudioManager_S>();

        secondCamera.enabled = false;
        level = 1;
        canvas = canvasAsset.GetComponent<Canvas_S>(); // Very unlikely the canvas gameObject is ever going to be called
        canvas.getLevelUIText().text = "level " + level;

        buildLevel();
    }


    private void OnTriggerEnter2D(Collider2D collision)
    {
        if (collision.gameObject.CompareTag("Player") && canGoToNext)
            NewLevel();
    }


    // ** Methods **
    public void NewLevel()
    {
        canGoToNext = false;

        secondCamera.transform.position = mainCamera.transform.position;
        mainCamera.enabled = false;
        secondCamera.enabled = true;
        secondCamera.gameObject.AddComponent<MoveToLocation_S>().setDesiredLocation(new Vector2(0, 5.57f), 0.2f);

        player.SetActive(false);

        canvas.hideUnnecessaryUI();
        AudioManager.StopAllUnnecessaryLoops();

        level++;

        StartCoroutine(FloorTransition());
    }


    public void canChangeLevel()
    {
        canGoToNext = true;
    }


    public void buildLevel()
    {
        int randInt = UnityEngine.Random.Range(0, layouts.Length);
        setTableFurniture();
        Instantiate(layouts[randInt], new Vector3(0, 0, 0), Quaternion.identity);
    }


    private void setTableFurniture()
    {
        List<GameObject> tableFurnitureF = new List<GameObject>();
        List<GameObject> tableFurnitureB = new List<GameObject>();
        List<GameObject> tableFurnitureR = new List<GameObject>();
        List<GameObject> tableFurnitureL = new List<GameObject>();

        foreach (GameObject furniture in tableFurniture)
        {
            if (furniture.GetComponent<Furniture_S>().facingDirection == 'F')
                tableFurnitureF.Add(furniture);
            else if (furniture.GetComponent<Furniture_S>().facingDirection == 'B')
                tableFurnitureB.Add(furniture);
            else if (furniture.GetComponent<Furniture_S>().facingDirection == 'R')
                tableFurnitureR.Add(furniture);
            else if (furniture.GetComponent<Furniture_S>().facingDirection == 'L')
                tableFurnitureL.Add(furniture);

            else if (furniture.GetComponent<Furniture_S>().facingDirection == 'H')
            {
                tableFurnitureR.Add(furniture);
                tableFurnitureL.Add(furniture);
            }
            else if (furniture.GetComponent<Furniture_S>().facingDirection == 'V')
            {
                tableFurnitureF.Add(furniture);
                tableFurnitureB.Add(furniture);
            }
        }

        FurnitureParent_S.setAllArrays(tableFurnitureF.ToArray(), tableFurnitureB.ToArray(), tableFurnitureR.ToArray(), tableFurnitureL.ToArray());
    }




    private void SetupQuestions()
    {
        int selectedQnA_id = UnityEngine.Random.Range(0, qnaArray.Length);
        QnA_S selectedQnA = qnaArray[selectedQnA_id];

        canvas.QuestUI.setText(selectedQnA.question);

        Instantiate(collectable, new Vector2(UnityEngine.Random.Range(-2, 2), UnityEngine.Random.Range(-1, 1)), Quaternion.identity);

        Instantiate(collectable, new Vector2(UnityEngine.Random.Range(-2, 2), UnityEngine.Random.Range(-1, 1)), Quaternion.identity);

        Instantiate(collectable, new Vector2(UnityEngine.Random.Range(-2, 2), UnityEngine.Random.Range(-1, 1)), Quaternion.identity);
    }


    // ** Get Methods **
    public QnA_S[] getQNAArray()
    {
        return qnaArray;
    }


    // ** Coroutines **
    IEnumerator FloorTransition()
    {
        GameObject door = GameObject.Find("Door");
        GameObject elevator = GameObject.Find("Elevator");
        door.GetComponent<Animator>().SetTrigger("Activate");
        elevator.GetComponent<Animator>().SetTrigger("Activate");
        secondCamera.GetComponent<Animator>().SetTrigger("Activate");


        yield return new WaitForSecondsRealtime(2f);

        // Creates the background of the elevator
        GameObject elevatorBG = Instantiate(elevatorBackground, transform);

        yield return new WaitForSecondsRealtime(2f);

        // Reloads the Scene
        SceneManager.LoadScene("Floor 1");


        yield return new WaitForFixedUpdate();

        // Loads Items important to the scene transition
        buildLevel();
        GameObject rail = Instantiate(elevatorRail, new Vector2(0, -4), Quaternion.identity);
        GameObject.Find("Tilemap_Building").GetComponent<TilemapRenderer>().enabled = false;

        yield return new WaitForFixedUpdate();

        // Finish animations related to the end of a scene transition
        door = GameObject.Find("Door");
        door.GetComponent<Animator>().SetTrigger("NotOpen");
        secondCamera.GetComponent<Animator>().SetTrigger("Activate");
        elevator.GetComponent<Animator>().SetTrigger("Activate");

        elevatorBG.GetComponent<Animator>().SetTrigger("Activate");
        elevatorBG.GetComponentInChildren<Animator>().SetTrigger("Activate");

        yield return new WaitForSecondsRealtime(4f);

        // Scene transition ends; runs code important to the new scene
        Destroy(elevatorBG);
        Destroy(rail);

        door.GetComponent<Animator>().SetTrigger("Activate");

        canvas.showUnnecessaryUI();



        Text levelUIText = canvas.getLevelUIText();
        levelUIText.text = "Level " + level; // Updates the level text


        yield return new WaitForSecondsRealtime(0.5f);

        // Player can walk around
        GameObject.Find("Tilemap_Building").GetComponent<TilemapRenderer>().enabled = true;

        player.SetActive(true);
        GameObject.Find("Hand").GetComponent<Pistol_S>().Reload(true);
        secondCamera.enabled = false;
        mainCamera.enabled = true;
    }
}
